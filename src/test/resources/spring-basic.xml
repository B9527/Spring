<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
	
	<!-- ************************************************************************************************* -->
    <!-- <context:annotation-config/> 隐式地向 Spring容器注册                                                                                                                                                                                  -->
    <!-- 								AutowiredAnnotationBeanPostProcessor、                                                                                                                                                                                                            -->
    <!-- 								RequiredAnnotationBeanPostProcessor、                                                                                                                                                                                                                -->
    <!-- 								CommonAnnotationBeanPostProcessor                                                                 -->
    <!-- 								PersistenceAnnotationBeanPostProcessor
    									这4个BeanPostProcessor                                        -->  
    <!-- ************************************************************************************************* -->
	
    <!-- 该配置项其实也包含了自动注入上述processor的功能，因此当使用<context:component-scan/>后， -->
    <!-- 即可将<context:annotation-config/>省去                                                                                                             -->
	<context:component-scan base-package="com.somnus.spring.annotation" use-default-filters="false">
		<!-- 扫描符合@Component @Service @Repository的类 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component" />
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
	</context:component-scan>
	
    <!-- application 上下文 -->
    <bean class="com.somnus.ApplicationContextHolder"/>
    
    <context:property-placeholder ignore-unresolvable="true" location="classpath:requestinfo.properties" />
    
    <util:properties id="properties" location="classpath:requestinfo.properties" />
    
    <context:property-placeholder ignore-unresolvable="true" location="classpath:/env/configurations-dev.properties" />
    
	<!-- 数据源配置-DBCP数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="defaultAutoCommit" value="false" />
		<!-- 解密密码必须要配置的项 -->
		<property name="filters" value="config" />
		<property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${jdbc.publickey}" />
	</bean>

	<!-- 数据源配置 -->
	<!-- 代理datasource，使其能够显式获取preparedStatement的参数值 -->
	<bean id="proxyDataSource" class="org.jdbcdslog.ConnectionPoolDataSourceProxy">
		<property name="targetDSDirect" ref="dataSource" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="proxyDataSource" />
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="proxyDataSource" />
	</bean>
	
	<!-- 注解方式配置事物 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    
    <!-- 强制CGLIB代理 -->
	<!-- proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为true时，
	表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，
	则spring将自动使用CGLib动态代理。@see http://blog.chinaunix.net/uid-11898547-id-3417894.html -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
    
</beans>
